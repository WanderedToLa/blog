<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://wandered2la.com/blog</id>
    <title>Wandered2LA Blog</title>
    <updated>2024-07-19T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://wandered2la.com/blog"/>
    <subtitle>Wandered2LA Blog</subtitle>
    <icon>https://wandered2la.com/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[안전한 서비스를위한 환경구성 in frontend]]></title>
        <id>https://wandered2la.com/blog/frontend-environment</id>
        <link href="https://wandered2la.com/blog/frontend-environment"/>
        <updated>2024-07-19T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[얼마전 토스과제를 진행하며 알게된 점들은 매끄러운 사용자경험을 위해 frontend 로직뿐 아니라]]></summary>
        <content type="html"><![CDATA[<p>얼마전 토스과제를 진행하며 알게된 점들은 매끄러운 사용자경험을 위해 frontend 로직뿐 아니라<br>
<!-- -->보이지 않는 환경설정에도 엄청난 노력을 하고있음을 알게되었다. 이전에 개발을 하며<br>
<!-- -->알고는 있지만 자세하게 몰랐던 부분과 그들의 디테일에 놀라워하며 면접준비를 했는데<br>
<!-- -->이 글에서는 이 과정에서 알게된 사실들을 정리한다.</p>
<div class="theme-admonition theme-admonition-important admonition_xJq3 alert alert--info"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>참고</div><div class="admonitionContent_BuS1"><p>Youtube 및 toss tech blog를 참고하여 작성한 글 입니다.</p></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="dependencies-in-packagejson">dependencies in Package.json<a href="https://wandered2la.com/blog/frontend-environment#dependencies-in-packagejson" class="hash-link" aria-label="Direct link to dependencies in Package.json" title="Direct link to dependencies in Package.json">​</a></h2>
<p>우리가 개발을하며 패키지매니저를 통해 라이브러리를 설치할 때는
<code>package.json</code> 내의 <code>dependencies</code> 필드를 통해 의존성을 규정하는것으로 설치한다
이때 해당 패키지의 이름과 버전범위를 지정한 객체를 통해 설치하는데
버전의 범위는 하나 혹은 여러개의 공백으로 분리된 문자열이다.<br>
<!-- -->버전범위를 지정하는 자세한 방법은 <a href="https://docs.npmjs.com/misc/semver" target="_blank" rel="noopener noreferrer">semver</a>를 참고</p>
<p>만약 개발중에만 필요한 라이브러리일 경우 <code>devDependencies</code>필드를 활용하며</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">npm install some-package --save-dev</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>위와 같은 명령어로 설치 가능하고 패키지를 설치 후 <code>devDependencies</code>에 추가한다.<br>
<!-- -->여기서 만약 내가 clone된 repository에서 <code>npm install</code>했을 경우 npm은 이를 프로젝트를<br>
<!-- -->개발중이라고 인식하고 <code>devDependencies</code>에 추가하니 유의할 것.</p>
<p>마지막으로 본인만의 plugin을 만들 때 사용하는 <code>peerDependencies</code>인데<br>
<!-- -->정의에 따르면 상속되는 의존성으로 패키지를 사용하는 곳에서 제공해야하는 의존성이다.<br>
<!-- -->만약 프로젝트 내에서 패키지를 <code>peerDependencies</code>로 명시할 경우 패키지를 제공하는 책임을<br>
<!-- -->가장 상위프로젝트로 바꾸기 때문에 번들링 결과에서 중복을 막을 수 있다.</p>
<p>하지만 이러한 장점에도 치명적인 단점은 의존성 전파문제이다.</p>
<div class="language-json codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-json codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">package A:</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    peerDependencies:</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            "package P"</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">package B:</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        dependencies:</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            "package A"</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    peerDependencies:</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            "package P"</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">package C</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        dependencies:</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            "package B"</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    peerDependencies:</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            "package P"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>위와 같이 peerDependency를 사용하는 <code>package A</code>에서 A를 가지고 있는 모든 패키지들은
A를 사용하지 않음에도 peerDependencies에 추가해주어야 하며 이는 의존성의 관리복잡도를 증가시켜<br>
<!-- -->에러의 확률을 높인다 npm과 같은 패키지매니저들에서 이러한 오류들을 엄밀히 검사하지 않기 때문에
유의해야 하며 따라서 <code>peerDependencies</code>를 사용하는 경우<br>
<!-- -->단 하나의 패키지만 존재해야 하는경우(싱글톤) 일때 사용할 수 있다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="dependencies의-문제점">dependencies의 문제점<a href="https://wandered2la.com/blog/frontend-environment#dependencies%EC%9D%98-%EB%AC%B8%EC%A0%9C%EC%A0%90" class="hash-link" aria-label="Direct link to dependencies의 문제점" title="Direct link to dependencies의 문제점">​</a></h3>
<p>위와 같은 문제말고도 <code>npm/node_modules</code>의 문제는 <strong>유령의존성(Phantom Dependency)</strong> 현상이다<br>
<!-- -->node_modules를 사용하는 yarn v1 및 npm에서는 중복해서 설치하는 모듈을 피하기 위해<br>
<!-- -->호이스팅 기법을 사용한다</p>
<p><img loading="lazy" alt="Hoisting Tree" src="https://wandered2la.com/assets/images/hoisting-tree-45c2932b3dc3597787977575c84561d2.png" width="1024" height="458" class="img_ev3q"></p>
<p>왼쪽과 같은 의존성트리일 경우 디스크공간의 절약을 위해 중복되는 트리를 지우는 과정에서<br>
<!-- -->직접 의존하고 있지 않았던 <code>B(1.0)</code> 패키지를 불러와 사용할 수 있다.<br>
<!-- -->package.json 에 명시하지 않은 라이브러리를 사용할 수 있는 현상을 Phantom Dependency라고 하며<br>
<!-- -->이러한 특성은 시스템을 혼란스럽게 하고 최악의 경우 Runtime Error의 가능성을 높힌다.</p>
<p>토스팀에서는 이러한 문제를 해결하기 위해 <code>Yarn Berry + PnP</code>를 도입하며 해결했다.<br>
<!-- -->Yarn Berry는 <code>Plug'n'Play</code> 전략을 이용하여 기존의 Package.json을 기반으로 의존성 트리를<br>
<!-- -->만들어 node_modules 구조를 생성하던 방식에서 의존성 설치시 node_modules를 생성하지 않고<br>
<code>.yarn/cache</code>폴더에 의존성 정보를 저장한다 또한 <code>.pnp.cjs</code> 파일에 의존성을 찾을 수 있는<br>
<!-- -->정보를 기록하여 효율적인 패키지 관리를 할 수 있다.</p>
<p>yarn은 기존 node.js의 <code>require</code>함수를 덮어씌워 동작하며 효율적인 패키지관리를<br>
<!-- -->할 수 있고 이때문에 특정 패키지와 의존성에 대한 정보가 필요할 때 바로 알 수 있다<br>
<!-- -->또한 Yarn PnP 시스템에서 각 의존성은 Zip 아카이브로 관리하게 되어 다음과 같은 장점이 생긴다</p>
<ol>
<li>node_modules가 없음 -&gt; 빠른 설치 가능</li>
<li>패키지들은 하나의 Zip아카이브로 저장하여 중복방지</li>
<li>파일의 수가 적어지며 변경사항의 감지가 쉬워지고 삭제가 빠르다.</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="zero-install">Zero Install<a href="https://wandered2la.com/blog/frontend-environment#zero-install" class="hash-link" aria-label="Direct link to Zero Install" title="Direct link to Zero Install">​</a></h3>
<p>여기서 한발 더 나아가 의존성을 Git으로 관리한다면 어떨까?<br>
<!-- -->일반적인 node_modules의 크기는 1.2GB/13만5천개의 파일을 가지고 있지만 yarn을 사용한다면<br>
<!-- -->139MB/2천개의 압축파일로 줄어든다 이렇게 줄어든 파일크기는 Git으로 관리하여 버전관리에<br>
<!-- -->포함시키고 설치할게 아예없는 환경을 구성한다.(Zero-Install)</p>
<p>토스팀에서 Zero-Install을 사용하며 얻은 장점 두 가지</p>
<ol>
<li>
<p>clone 혹은 branch변경시 yarn install 실행x</p>
<ul>
<li>만약 다른 의존성을 사용하는 브랜치로 이동한다면 재설치할 필요가 없다.</li>
</ul>
</li>
<li>
<p>CI동작시 의존성 설치시간 절약</p>
<ul>
<li>cache miss 일경우 60 ~ 90초 가량 소요되던 시간을 의존성 복제만으로<br>
<!-- -->바로 사용이 가능하여 시간절약</li>
</ul>
</li>
</ol>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="bundler">Bundler<a href="https://wandered2la.com/blog/frontend-environment#bundler" class="hash-link" aria-label="Direct link to Bundler" title="Direct link to Bundler">​</a></h2>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="참고">참고<a href="https://wandered2la.com/blog/frontend-environment#%EC%B0%B8%EA%B3%A0" class="hash-link" aria-label="Direct link to 참고" title="Direct link to 참고">​</a></h2>
<ul>
<li><a href="https://programmingsummaries.tistory.com/385" target="_blank" rel="noopener noreferrer">package.json 번역</a></li>
<li><a href="https://toss.tech/article/node-modules-and-yarn-berry" target="_blank" rel="noopener noreferrer">node_modules로부터 우리를 구원해 줄 Yarn Berry</a></li>
<li><a href="https://www.youtube.com/watch?v=mee1QbvaO10&amp;t=325s" target="_blank" rel="noopener noreferrer">FECONF 2022 [B4] 내 import 문이 그렇게 이상했나요?</a></li>
<li><a href="https://www.youtube.com/watch?v=Ix9gxqKOatY&amp;t=114s" target="_blank" rel="noopener noreferrer">FECONF 2022 [B2] 일백개 패키지 모노레포 우아하게 운영하기</a></li>
<li><a href="https://www.youtube.com/watch?v=QfU5REp8sjQ&amp;t=1253s" target="_blank" rel="noopener noreferrer">FEConf 2023 [B4] React Native, Metro를 넘어서</a></li>
<li><a href="https://www.youtube.com/watch?v=2IE68SDTYvI&amp;list=PL1DJtS1Hv1PiGXmgruP1_gM2TSvQiOsFL&amp;index=32" target="_blank" rel="noopener noreferrer">토스ㅣSLASH 22 - 잃어버린 개발자의 시간을 찾아서: 매일 하루를 아끼는 DevOps 이야기</a></li>
<li><a href="https://www.youtube.com/watch?v=IKyA8BKxpXc" target="_blank" rel="noopener noreferrer">토스ㅣSLASH 22 - 잃어버린 유저의 시간을 찾아서 : 100년을 아껴준 SSR 이야기</a></li>
<li><a href="https://medium.com/naver-place-dev/javascript-%EB%B2%88%EB%93%A4%EB%9F%AC%EC%9D%98-%EC%9D%B4%ED%95%B4-1-javascript-%EB%AA%A8%EB%93%88-d68c7e438fcd" target="_blank" rel="noopener noreferrer">JavaScript 번들러의 이해</a></li>
<li><a href="https://tech.wonderwall.kr/articles/git/" target="_blank" rel="noopener noreferrer">Git 내부 동작 파헤치기</a></li>
</ul>]]></content>
        <author>
            <name>WooSeok</name>
            <uri>https://github.com/WanderedToLa</uri>
        </author>
        <category label="frontend" term="frontend"/>
        <category label="environment" term="environment"/>
        <category label="dependencies" term="dependencies"/>
        <category label="transplier" term="transplier"/>
        <category label="git" term="git"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[docusaurus custom plugin 만들기]]></title>
        <id>https://wandered2la.com/blog/docusaurus-plugin</id>
        <link href="https://wandered2la.com/blog/docusaurus-plugin"/>
        <updated>2024-07-01T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Recent Posts]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="recent-posts">Recent Posts<a href="https://wandered2la.com/blog/docusaurus-plugin#recent-posts" class="hash-link" aria-label="Direct link to Recent Posts" title="Direct link to Recent Posts">​</a></h2>
<p>메인페이지에 recentpost 기능을 추가하려고 미루다가 드디어 시작하며<br>
<!-- -->docusaurus에서 직접 파일시스템에 접근하려고 몇번을 삽질하다가<br>
<!-- -->plugin을 만들어 사용해야한다는 결론을 얻었다.<br>
<!-- -->이미 만들어진 blog 관련 plugin이 있긴했지만 <a href="https://docusaurus.io/docs/api/plugins/@docusaurus/plugin-content-blog" target="_blank" rel="noopener noreferrer">plugin-content-blog</a><br>
<!-- -->config 필드에서 option을통해 수정하는 방식은 원하던 모양이 아니라 패스했음.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="architecture">Architecture<a href="https://wandered2la.com/blog/docusaurus-plugin#architecture" class="hash-link" aria-label="Direct link to Architecture" title="Direct link to Architecture">​</a></h2>
<p>Archive탭에 있는 글 중 최신순으로 5개만 메인페이지에 보여주고 싶었는데<br>
<!-- -->메인페이지에서 비동기로 파일시스템을 호출해 읽은다음 slug를 리턴하는 식으로<br>
<!-- -->구상했지만 docusaurus의 제작의도랑은 전혀 다르기때문에 에러가 생길 수 밖에없다.<br>
<!-- -->친절하게도 아키텍처 소개글을 보며 감을 잡을수 있었음</p>
<p>docusaurus의 설계 혹은 멘탈모델이 코드를 직접 import해서 쓰거나 하지않고<br>
<!-- -->json으로 임시파일을 만들어 데이터를 주고받거나 사용자가 plugin에 접근한다면<br>
<!-- -->오로지 config.js를 통해 상호작용 할 수 있도록 설계되어 있기때문에<br>
<!-- -->여기서 제공하는 Lifecycle API를 이용해 build시 생성된 json 파일로<br>
<!-- -->내 블로그 데이터에 접근해야 한다. 따라서 대부분의 커스텀은 config에서 가능함</p>
<p><img loading="lazy" alt="Architecture" src="https://wandered2la.com/assets/images/docusaurus-architecture-5b7220912f5cfdff40a7728233abb902.png" width="2228" height="2007" class="img_ev3q"></p>
<p>그래서 문서를 찾아보던중 globalData를 사용할 수 있는 <code>useGlobalData</code> API가<br>
<!-- -->있긴했으나 docs의 정보만 담아줄 뿐 blog의 데이터는 담기지 않길래 Lifecycle API를 이용해<br>
<!-- -->build시 json에 블로그 정보들을 담아 사용하는 쪽으로 변경했다.<br>
<!-- -->globalData의 정보들은 <code>npm start</code>시 <code>.docusaurus/globalData.json</code>에서 확인가능</p>
<ul>
<li><a href="https://docusaurus.io/docs/docusaurus-core#useGlobalData" target="_blank" rel="noopener noreferrer">useGlobalData</a></li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="using-plugins">Using Plugins<a href="https://wandered2la.com/blog/docusaurus-plugin#using-plugins" class="hash-link" aria-label="Direct link to Using Plugins" title="Direct link to Using Plugins">​</a></h2>
<p>plugin은 명령어를 통해 설치할 수도 있지만 로컬파일을 불러와 사용가능함</p>
<div class="language-ts codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockTitle_Ktv7">docusaurus.config.js</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-ts codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">export</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">default</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token comment" style="color:rgb(98, 114, 164)">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  plugins</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token string" style="color:rgb(255, 121, 198)">'./src/plugins/docusaurus-local-plugin'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>로컬파일을 불러와 사용하는 경우 절대경로로 명시한다.</p>
<div class="language-ts codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockTitle_Ktv7">docusaurus.config.js</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-ts codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">export</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">default</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token comment" style="color:rgb(98, 114, 164)">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  plugins</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">async</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">myPlugin</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">context</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> options</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token comment" style="color:rgb(98, 114, 164)">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        name</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'my-plugin'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">async</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">loadContent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">          </span><span class="token comment" style="color:rgb(98, 114, 164)">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">async</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">contentLoaded</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> content</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> actions </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">          </span><span class="token comment" style="color:rgb(98, 114, 164)">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token comment" style="color:rgb(98, 114, 164)">/* other lifecycle API */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>직접 함수를 작성하는 방법도 가능</p>
<p>위와같이 경로를 지정했다면 Docusaurus측에서 제공하는 Lifecycle APIs를<br>
<!-- -->이용해 코드를 작성하면 된다.</p>
<ul>
<li><a href="https://docusaurus.io/docs/api/plugin-methods/lifecycle-apis" target="_blank" rel="noopener noreferrer">Lifecycle APIs</a></li>
</ul>
<p>API들중 가장 중요하다고 볼 수 있는 <code>async loadContent()</code>와<br>
<code>async contentLoaded({content, actions})</code> 두 가지가 있다 <code>loadContent</code>에서 파일시스템에<br>
<!-- -->접근하거나 다양한 동작들이 가능하고 <code>loadContent</code>에서 내가 필요한 값을 return한다면<br>
<!-- -->그 값은<code>contentLoaded</code>함수에서 <code>content</code> 파라미터로 받는다. <code>actions</code>의 경우<br>
<!-- -->기본으로 제공하는 3가지 함수들이 있고 경로를 설정하는 경우 <code>appRoute</code><br>
<!-- -->json파일을 만든다면 <code>createData</code> 나의 경우 기존 globalData.json에 데이터를
추가하려고 했기에 마지막인 <code>setGlobalData</code>를 사용했다.</p>
<ul>
<li>loadContent - 다양한 동작을 정의하는 함수 (파일시스템, API호출...)</li>
<li>contentLoaded - content,actions를 파라미터로 받는 함수<!-- -->
<ul>
<li>content: loadCotent의 리턴값</li>
<li>actions: appRoute, createData, setGlobalData로 구성</li>
</ul>
</li>
</ul>
<div class="language-ts codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockTitle_Ktv7">./src/plugins/my-plugin.js</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-ts codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">export</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">default</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  plugins</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">async</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">myPlugin</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">context</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> options</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        name</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'my-plugin'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">async</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">loadContent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">          </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token comment" style="color:rgb(98, 114, 164)">// loadContent의 return값 content에 전달</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">async</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">contentLoaded</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> content</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> actions </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">          </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> setGlobalData </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> actions</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">          </span><span class="token function" style="color:rgb(80, 250, 123)">setGlobalData</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> myBlogData</span><span class="token operator">:</span><span class="token plain"> content </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>위처럼 코드를 작성하면 <code>npm start</code>시 globalData에 데이터가 저장되고<br>
<!-- -->내가 원하는 부분에서 사용하려면 <code>useGlobalData</code> 및 <code>usePluginData</code>를 사용해<br>
<!-- -->데이터를 가져와 사용하면 끝</p>
<div class="language-tsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockTitle_Ktv7">./src/pages/index.tsx</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-tsx codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token imports"> usePluginData </span><span class="token imports punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'@docusaurus/useGlobalData'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">export</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">default</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">Home</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> myBlogData </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">usePluginData</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">'my-plugin'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag" style="color:rgb(255, 121, 198)">ul</span><span class="token tag" style="color:rgb(255, 121, 198)"> </span><span class="token tag attr-name" style="color:rgb(241, 250, 140)">className</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(248, 248, 242)">=</span><span class="token tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token tag attr-value" style="color:rgb(255, 121, 198)">post-list-container</span><span class="token tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain-text">      </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain">myBlogData</span><span class="token operator">?.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">map</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">post</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token arrow operator">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag" style="color:rgb(255, 121, 198)">li</span><span class="token tag" style="color:rgb(255, 121, 198)"> </span><span class="token tag attr-name" style="color:rgb(241, 250, 140)">key</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(248, 248, 242)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)">post</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token tag script language-javascript property-access" style="color:rgb(255, 121, 198)">slug</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain-text">          </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag class-name" style="color:rgb(255, 121, 198)">Link</span><span class="token tag" style="color:rgb(255, 121, 198)"> </span><span class="token tag attr-name" style="color:rgb(241, 250, 140)">to</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(248, 248, 242)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token tag script language-javascript template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><span class="token tag script language-javascript template-string string" style="color:rgb(255, 121, 198)">/blog/</span><span class="token tag script language-javascript template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">${</span><span class="token tag script language-javascript template-string interpolation" style="color:rgb(255, 121, 198)">post</span><span class="token tag script language-javascript template-string interpolation punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token tag script language-javascript template-string interpolation" style="color:rgb(255, 121, 198)">slug</span><span class="token tag script language-javascript template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token tag script language-javascript template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain">post</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">title</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;/</span><span class="token tag class-name" style="color:rgb(255, 121, 198)">Link</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain-text">          </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain">post</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">date</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain-text">        </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;/</span><span class="token tag" style="color:rgb(255, 121, 198)">li</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain-text">    </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;/</span><span class="token tag" style="color:rgb(255, 121, 198)">ul</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content>
        <author>
            <name>WooSeok</name>
            <uri>https://github.com/WanderedToLa</uri>
        </author>
        <category label="docusaurus" term="docusaurus"/>
        <category label="plugin" term="plugin"/>
        <category label="custom" term="custom"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[안전한 프론트엔드 서비스란?]]></title>
        <id>https://wandered2la.com/blog/frontend-observability</id>
        <link href="https://wandered2la.com/blog/frontend-observability"/>
        <updated>2024-06-22T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[SSR(Server-Side Rendering) 도입의 변화]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="ssrserver-side-rendering-도입의-변화">SSR(Server-Side Rendering) 도입의 변화<a href="https://wandered2la.com/blog/frontend-observability#ssrserver-side-rendering-%EB%8F%84%EC%9E%85%EC%9D%98-%EB%B3%80%ED%99%94" class="hash-link" aria-label="Direct link to SSR(Server-Side Rendering) 도입의 변화" title="Direct link to SSR(Server-Side Rendering) 도입의 변화">​</a></h2>
<p>여러기업들에서 사용자에게 더 나은 사용성을 제공하기 위해 노력하고 있다.<br>
<!-- -->Frontend 측면에서 어떤 노력들을 하고있을까 찾아보았는데<br>
<!-- -->첫번째는 Node.js 의 발전으로 server와 client가 같은 언어를 사용하게 되면서<br>
<!-- -->렌더링의 책임을 Server로 이전하려는 움직임이 나타났고<br>
<!-- -->클라이언트 측에서 렌더링을 담당하던 React와 같은 환경에서<br>
<!-- -->사용자들이 페이지에 처음으로 진입하는 시간<code>(LCP/FCP)</code>을 줄여 더 나은 사용성을 제공한 것이다.</p>
<p>이런 대표적인 프레임워크로 Next.js가 있고 단점은<br>
<!-- -->Server측에서 렌더링 한다는 것은 결국 관리해야하는 서버가 있다는 것이고 곧<br>
<!-- -->모니터링 하는데 비용이 들고 트래픽이 몰릴 경우를 대비해야한다.<br>
<!-- -->또한 Build 및 배포시간이 오래걸린다는 단점도 존재.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="observability">Observability?<a href="https://wandered2la.com/blog/frontend-observability#observability" class="hash-link" aria-label="Direct link to Observability?" title="Direct link to Observability?">​</a></h2>
<p>컨퍼런스나 자료들을 찾다보면 <code>Observability</code>라는 단어를 심심치 않게 볼 수 있다.<br>
<!-- -->도대체 무슨 뜻일까 보다보니 나에게는 이상적으로 다가왔는데<br>
<!-- -->이 단어를 만든 사람 <code>Rudolf E Kalman</code>은 "시스템의 출력으로부터 시스템의 상태를 이해할 수 있는 능력"
이라고 한다 결국 이 말이 로깅이나 모니터링 지표를 통해 우리의 App의 상태를 측정하고<br>
<!-- -->발 빠른 대응이 가능한 능력이라고 생각한다.</p>
<p>특히나 규모가 큰 기업들은 MSA같은 아키텍처를 사용하고 요청이 분산처리되어<br>
<!-- -->제대로 로그를 확인하거나 모니터링이 힘들 수 있다.<br>
<!-- -->이상적으로는 에러가 아예없는 환경을 꿈꾸긴 하겠지만 에러는 있을 수 밖에 없고<br>
<!-- -->그렇기에 발빠른 대응을 위해 최대한 <code>Observability</code>를 향상시키기 위해 힘쓰는것 같다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="web-vitals">Web Vitals<a href="https://wandered2la.com/blog/frontend-observability#web-vitals" class="hash-link" aria-label="Direct link to Web Vitals" title="Direct link to Web Vitals">​</a></h2>
<p>대표적으로 프론트엔드의 성능을 측정할 때 신경 쓰는 4가지는</p>
<ul>
<li>TTFB: 브라우저가 서버로부터 첫번째 바이트를 수신하는 속도(&gt;500ms)</li>
<li>LCP: 가장 큰 콘텐츠가 브라우저에 그려지기까지의 속도(&gt;2.5s)</li>
<li>FCP: 사용자에게 볼 수 있는 콘텐츠가 최초로 그려지기까지의 속도(&gt;1.8s)</li>
<li>TTI: 페이지 로딩이 완료되고 사용자 입력에 응답하기까지의 속도(&gt;100ms)</li>
</ul>
<p>이 외에도 레이아웃 시프트(CLS)나 TTI와 유사한 FID등이 있다.</p>
<p>이런 지표들의 자세한 설명이아닌 이유에 대해 생각해보려 하는데<br>
<!-- -->위와같은 지표들을 통해 성능을 측정/최적화 하는 것은 사용자 경험 개선으로 이어지고<br>
<!-- -->꾸준한 모니터링을 통해 성능의 저하를 막는다고 생각한다 혹은 테스트코드 작성을 통해 막거나?</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="정리">정리<a href="https://wandered2la.com/blog/frontend-observability#%EC%A0%95%EB%A6%AC" class="hash-link" aria-label="Direct link to 정리" title="Direct link to 정리">​</a></h2>
<p>누군가 나에게 안전한 프론트엔드 서비스란 뭐에요? 라고 묻는다면<br>
<!-- -->Frontend의 Observability를 가능한 최대로 끌어올리는 것과 Metric같은 보조지표를 활용하여<br>
<!-- -->App의 성능을 측정하고 최적화,정확성을 테스트하여 웹사이트의 다양한 측면들을 원활하게<br>
<!-- -->만들어 사용자 경험을 개선하고 에러를 감지하여 신속하게 처리할 수 있는 모니터링 환경을 구성하는 것
이상적으로는 에러가 아예없는 환경이 안전한 프론트엔드 서비스에 근접하지 않을까 라고 대답할것같다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="참고">참고<a href="https://wandered2la.com/blog/frontend-observability#%EC%B0%B8%EA%B3%A0" class="hash-link" aria-label="Direct link to 참고" title="Direct link to 참고">​</a></h3>
<ul>
<li><a href="https://www.youtube.com/watch?v=hPyyFu3lrEg&amp;list=PLpkj8RKr48waFtrqvJjbNrpGCvdxyX8Nx&amp;index=30" target="_blank" rel="noopener noreferrer">SSR의 기쁨과 슬픔: 렌더링의 변화의 흐름을 통해 알아보는 SSR과 Streaming SSR | 인프콘2023</a></li>
<li><a href="https://www.youtube.com/watch?v=9xl9X2pfHeI&amp;t=1934s" target="_blank" rel="noopener noreferrer">[Dev Dive_ Frontend Day] 스트리밍 SSR 딥 다이브</a></li>
<li><a href="https://www.youtube.com/watch?v=Ifz0LsfAG94&amp;list=PL1DJtS1Hv1PiGXmgruP1_gM2TSvQiOsFL&amp;index=23" target="_blank" rel="noopener noreferrer">토스ㅣSLASH 23 - 분산 추적 체계 &amp; 로그 중심으로 Observability 확보하기</a></li>
<li><a href="https://www.youtube.com/watch?v=2IE68SDTYvI" target="_blank" rel="noopener noreferrer">토스ㅣSLASH 22 - 잃어버린 개발자의 시간을 찾아서: 매일 하루를 아끼는 DevOps 이야기</a></li>
</ul>]]></content>
        <author>
            <name>WooSeok</name>
            <uri>https://github.com/WanderedToLa</uri>
        </author>
        <category label="Observability" term="Observability"/>
        <category label="Frontend" term="Frontend"/>
    </entry>
</feed>