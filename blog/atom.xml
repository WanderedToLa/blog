<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://wandered2la.com/blog</id>
    <title>Wandered2LA Blog</title>
    <updated>2024-06-22T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://wandered2la.com/blog"/>
    <subtitle>Wandered2LA Blog</subtitle>
    <icon>https://wandered2la.com/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[안전한 프론트엔드 서비스란?]]></title>
        <id>https://wandered2la.com/blog/frontend-observability</id>
        <link href="https://wandered2la.com/blog/frontend-observability"/>
        <updated>2024-06-22T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[SSR(Server-Side Rendering) 도입의 변화]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="ssrserver-side-rendering-도입의-변화">SSR(Server-Side Rendering) 도입의 변화<a href="https://wandered2la.com/blog/frontend-observability#ssrserver-side-rendering-%EB%8F%84%EC%9E%85%EC%9D%98-%EB%B3%80%ED%99%94" class="hash-link" aria-label="Direct link to SSR(Server-Side Rendering) 도입의 변화" title="Direct link to SSR(Server-Side Rendering) 도입의 변화">​</a></h2>
<p>여러기업들에서 사용자에게 더 나은 사용성을 제공하기 위해 노력하고 있다.<br>
<!-- -->Frontend 측면에서 어떤 노력들을 하고있을까 찾아보았는데<br>
<!-- -->첫번째는 Node.js 의 발전으로 server와 client가 같은 언어를 사용하게 되면서<br>
<!-- -->렌더링의 책임을 Server로 이전하려는 움직임이 나타났고<br>
<!-- -->클라이언트 측에서 렌더링을 담당하던 React와 같은 환경에서<br>
<!-- -->사용자들이 페이지에 처음으로 진입하는 시간<code>(LCP/FCP)</code>을 줄여 더 나은 사용성을 제공한 것이다.</p>
<p>이런 대표적인 프레임워크로 Next.js가 있고 단점은<br>
<!-- -->Server측에서 렌더링 한다는 것은 결국 관리해야하는 서버가 있다는 것이고 곧<br>
<!-- -->모니터링 하는데 비용이 들고 트래픽이 몰릴 경우를 대비해야한다.<br>
<!-- -->또한 Build 및 배포시간이 오래걸린다는 단점도 존재.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="observability">Observability?<a href="https://wandered2la.com/blog/frontend-observability#observability" class="hash-link" aria-label="Direct link to Observability?" title="Direct link to Observability?">​</a></h2>
<p>컨퍼런스나 자료들을 찾다보면 <code>Observability</code>라는 단어를 심심치 않게 볼 수 있다.<br>
<!-- -->도대체 무슨 뜻일까 보다보니 나에게는 이상적으로 다가왔는데<br>
<!-- -->이 단어를 만든 사람 <code>Rudolf E Kalman</code>은 "시스템의 출력으로부터 시스템의 상태를 이해할 수 있는 능력"
이라고 한다 결국 이 말이 로깅이나 모니터링 지표를 통해 우리의 App의 상태를 측정하고<br>
<!-- -->발 빠른 대응이 가능한 능력이라고 생각한다.</p>
<p>특히나 규모가 큰 기업들은 MSA같은 아키텍처를 사용하고 요청이 분산처리되어<br>
<!-- -->제대로 로그를 확인하거나 모니터링이 힘들 수 있다.<br>
<!-- -->이상적으로는 에러가 아예없는 환경을 꿈꾸긴 하겠지만 에러는 있을 수 밖에 없고<br>
<!-- -->그렇기에 발빠른 대응을 위해 최대한 <code>Observability</code>를 향상시키기 위해 힘쓰는것 같다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="web-vitals">Web Vitals<a href="https://wandered2la.com/blog/frontend-observability#web-vitals" class="hash-link" aria-label="Direct link to Web Vitals" title="Direct link to Web Vitals">​</a></h2>
<p>대표적으로 프론트엔드의 성능을 측정할 때 신경 쓰는 4가지는</p>
<ul>
<li>TTFB: 브라우저가 서버로부터 첫번째 바이트를 수신하는 속도(&gt;500ms)</li>
<li>LCP: 가장 큰 콘텐츠가 브라우저에 그려지기까지의 속도(&gt;2.5s)</li>
<li>FCP: 사용자에게 볼 수 있는 콘텐츠가 최초로 그려지기까지의 속도(&gt;1.8s)</li>
<li>TTI: 페이지 로딩이 완료되고 사용자 입력에 응답하기까지의 속도(&gt;100ms)</li>
</ul>
<p>이 외에도 레이아웃 시프트(CLS)나 TTI와 유사한 FID등이 있다.</p>
<p>이런 지표들의 자세한 설명이아닌 이유에 대해 생각해보려 하는데<br>
<!-- -->위와같은 지표들을 통해 성능을 측정/최적화 하는 것은 사용자 경험 개선으로 이어지고<br>
<!-- -->꾸준한 모니터링을 통해 성능의 저하를 막는다고 생각한다 혹은 테스트코드 작성을 통해 막거나?</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="정리">정리<a href="https://wandered2la.com/blog/frontend-observability#%EC%A0%95%EB%A6%AC" class="hash-link" aria-label="Direct link to 정리" title="Direct link to 정리">​</a></h2>
<p>누군가 나에게 안전한 프론트엔드 서비스란 뭐에요? 라고 묻는다면<br>
<!-- -->Frontend의 Observability를 가능한 최대로 끌어올리는 것과 Metric같은 보조지표를 활용하여<br>
<!-- -->App의 성능을 측정하고 최적화,정확성을 테스트하여 웹사이트의 다양한 측면들을 원활하게<br>
<!-- -->만들어 사용자 경험을 개선하고 에러를 감지하여 신속하게 처리할 수 있는 모니터링 환경을 구성하는 것
이상적으로는 에러가 아예없는 환경이 안전한 프론트엔드 서비스에 근접하지 않을까 라고 대답할것같다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="참고">참고<a href="https://wandered2la.com/blog/frontend-observability#%EC%B0%B8%EA%B3%A0" class="hash-link" aria-label="Direct link to 참고" title="Direct link to 참고">​</a></h3>
<ul>
<li><a href="https://www.youtube.com/watch?v=hPyyFu3lrEg&amp;list=PLpkj8RKr48waFtrqvJjbNrpGCvdxyX8Nx&amp;index=30" target="_blank" rel="noopener noreferrer">SSR의 기쁨과 슬픔: 렌더링의 변화의 흐름을 통해 알아보는 SSR과 Streaming SSR | 인프콘2023</a></li>
<li><a href="https://www.youtube.com/watch?v=9xl9X2pfHeI&amp;t=1934s" target="_blank" rel="noopener noreferrer">[Dev Dive_ Frontend Day] 스트리밍 SSR 딥 다이브</a></li>
<li><a href="https://www.youtube.com/watch?v=Ifz0LsfAG94&amp;list=PL1DJtS1Hv1PiGXmgruP1_gM2TSvQiOsFL&amp;index=23" target="_blank" rel="noopener noreferrer">토스ㅣSLASH 23 - 분산 추적 체계 &amp; 로그 중심으로 Observability 확보하기</a></li>
<li><a href="https://www.youtube.com/watch?v=2IE68SDTYvI" target="_blank" rel="noopener noreferrer">토스ㅣSLASH 22 - 잃어버린 개발자의 시간을 찾아서: 매일 하루를 아끼는 DevOps 이야기</a></li>
</ul>]]></content>
        <author>
            <name>WooSeok</name>
            <uri>https://github.com/WanderedToLa</uri>
        </author>
        <category label="Observability" term="Observability"/>
        <category label="Frontend" term="Frontend"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[How To Speak]]></title>
        <id>https://wandered2la.com/blog/how-to-speak</id>
        <link href="https://wandered2la.com/blog/how-to-speak"/>
        <updated>2024-06-08T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[How To Speak]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="how-to-speak">How To Speak<a href="https://wandered2la.com/blog/how-to-speak#how-to-speak" class="hash-link" aria-label="Direct link to How To Speak" title="Direct link to How To Speak">​</a></h2>
<ul>
<li>재능보다 아는것이 중요하다.</li>
<li><a href="https://www.youtube.com/watch?v=Unzc731iCUY" target="_blank" rel="noopener noreferrer">How to Speak-MIT OpenCourseWare</a></li>
</ul>
<p>사회에서의 성공은 말하기, 글쓰기, 가진 아이디어의 퀄리티 순서로 결정된다.<br>
<!-- -->이 세가지 능력은 다음 공식에 따른다.</p>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token maybe-class-name">Quailty</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">F</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token constant" style="color:rgb(189, 147, 249)">K</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">P</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">T</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>맨처음으로 많이아는 것 <code>Knowledge</code>, 두번째로는 연습 <code>Practice</code>, 세번째는 재능이다 <code>Talent</code><br>
<strong>중요도는 K-P-T순 재능이아닌 많이 아는것이 중요하다.</strong></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="how-to-start">How To Start?<a href="https://wandered2la.com/blog/how-to-speak#how-to-start" class="hash-link" aria-label="Direct link to How To Start?" title="Direct link to How To Start?">​</a></h3>
<p>어떤 사람들은 농담으로 시작하는것이 좋다고 하지만<br>
<code>Patrick Winston</code> 교수가 말하는 첫번째 방법은 <strong>약속하기</strong><br>
<!-- -->예를들어, <strong>이 60분 강의 후에 여러분들은 지금까지는 몰랐던 대화방법을 알게 될겁니다</strong><br>
<!-- -->와 같이 약속을 하며 시작한다.</p>
<p><code>Patrick Winston</code> 교수가 강의를 할때마다 마음에 새기는 몇가지 사례를 소개하는데</p>
<ol>
<li>
<p>주제에 대해 반복하기 - "포인트는, 왜냐하면, 많은 이유가 있는데..."</p>
<ul>
<li>모르는 사람에게 말하듯 세번씩 반복</li>
</ul>
</li>
<li>
<p>내 아이디어에 경계를 지음 - 다른 사람과 아이디어 차별화</p>
</li>
<li>
<p>주제에 대해 거듭 상기시키기 - 강연중 사람들은 주제를 잃어버리곤 함.</p>
</li>
<li>
<p>질문하기 - 적절한 질문 어렵거나 너무뻔하지 않은</p>
</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-tools">The Tools<a href="https://wandered2la.com/blog/how-to-speak#the-tools" class="hash-link" aria-label="Direct link to The Tools" title="Direct link to The Tools">​</a></h3>
<p>다음은 <code>Patrick Winston</code> 교수가 강의에서 유용하게 사용하는 몇가지 도구들을 소개한다</p>
<ol>
<li><strong>Time&amp;Place</strong><br>
<!-- -->예를들어 발표를 할때 가장 적절한 시간은 오전11시. 모두 깨어있는 시간인데다<br>
<!-- -->점심전이라 피곤하지 않아 발표를 위한 시간으로 적절함.<br>
<!-- -->장소선정에 가장 중요한것은 밝은 조명 낮거나 어두우면 졸릴수 있다.</li>
</ol>]]></content>
        <author>
            <name>WooSeok</name>
            <uri>https://github.com/WanderedToLa</uri>
        </author>
        <category label="MITOpenCourseWare" term="MITOpenCourseWare"/>
        <category label="Patrick Winston" term="Patrick Winston"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Measuring Devloper Productivity]]></title>
        <id>https://wandered2la.com/blog/dev-ex</id>
        <link href="https://wandered2la.com/blog/dev-ex"/>
        <updated>2024-01-26T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Measuring Devloper Productivity: Real-World Examples]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="measuring-devloper-productivity-real-world-examples">Measuring Devloper Productivity: Real-World Examples<a href="https://wandered2la.com/blog/dev-ex#measuring-devloper-productivity-real-world-examples" class="hash-link" aria-label="Direct link to Measuring Devloper Productivity: Real-World Examples" title="Direct link to Measuring Devloper Productivity: Real-World Examples">​</a></h2>
<ul>
<li>test</li>
<li><a href="https://newsletter.pragmaticengineer.com/p/measuring-developer-productivity-bae" target="_blank" rel="noopener noreferrer">Measuring Devloper Productivity: Real-World Examples</a></li>
</ul>
<div class="theme-admonition theme-admonition-tip admonition_xJq3 alert alert--success"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>tip</div><div class="admonitionContent_BuS1"><p>Use the power of React to create interactive blog posts.</p></div></div>
<p>Simply add Markdown files (or folders) to the <code>blog</code> directory.</p>
<p>Regular blog authors can be added to <code>authors.yml</code>.</p>
<p>The blog post date can be extracted from filenames, such as:</p>
<ul>
<li><code>2019-05-30-welcome.md</code></li>
<li><code>2019-05-30-welcome/index.md</code></li>
</ul>
<p>A blog post folder can be convenient to co-locate blog post images:</p>
<p>The blog supports tags as well!</p>
<p><strong>And if you don't want a blog</strong>: just delete this directory, and use <code>blog: false</code> in your Docusaurus config.</p>]]></content>
        <author>
            <name>WooSeok</name>
            <uri>https://github.com/WanderedToLa</uri>
        </author>
        <category label="DX" term="DX"/>
    </entry>
</feed>