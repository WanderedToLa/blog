<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Wandered2LA Blog</title>
        <link>https://wandered2la.com/blog</link>
        <description>Wandered2LA Blog</description>
        <lastBuildDate>Mon, 01 Jul 2024 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[docusaurus custom plugin 만들기]]></title>
            <link>https://wandered2la.com/blog/docusaurus-plugin</link>
            <guid>https://wandered2la.com/blog/docusaurus-plugin</guid>
            <pubDate>Mon, 01 Jul 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[Recent Posts]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="recent-posts">Recent Posts<a href="https://wandered2la.com/blog/docusaurus-plugin#recent-posts" class="hash-link" aria-label="Direct link to Recent Posts" title="Direct link to Recent Posts">​</a></h2>
<p>메인페이지에 recentpost 기능을 추가하려고 미루다가 드디어 시작하며<br>
<!-- -->docusaurus에서 직접 파일시스템에 접근하려고 몇번을 삽질하다가<br>
<!-- -->plugin을 만들어 사용해야한다는 결론을 얻었다.<br>
<!-- -->이미 만들어진 blog 관련 plugin이 있긴했지만 <a href="https://docusaurus.io/docs/api/plugins/@docusaurus/plugin-content-blog" target="_blank" rel="noopener noreferrer">plugin-content-blog</a><br>
<!-- -->config 필드에서 option을통해 수정하는 방식은 원하던 모양이 아니라 패스했음.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="architecture">Architecture<a href="https://wandered2la.com/blog/docusaurus-plugin#architecture" class="hash-link" aria-label="Direct link to Architecture" title="Direct link to Architecture">​</a></h2>
<p>Archive탭에 있는 글 중 최신순으로 5개만 메인페이지에 보여주고 싶었는데<br>
<!-- -->메인페이지에서 비동기로 파일시스템을 호출해 읽은다음 slug를 리턴하는 식으로<br>
<!-- -->구상했지만 docusaurus의 제작의도랑은 전혀 다르기때문에 에러가 생길 수 밖에없다.<br>
<!-- -->친절하게도 아키텍처 소개글을 보며 감을 잡을수 있었음</p>
<p>docusaurus의 설계 혹은 멘탈모델이 코드를 직접 import해서 쓰거나 하지않고<br>
<!-- -->json으로 임시파일을 만들어 데이터를 주고받거나 사용자가 plugin에 접근한다면<br>
<!-- -->오로지 config.js를 통해 상호작용 할 수 있도록 설계되어 있기때문에<br>
<!-- -->여기서 제공하는 Lifecycle API를 이용해 build시 생성된 json 파일로<br>
<!-- -->내 블로그 데이터에 접근해야 한다. 따라서 대부분의 커스텀은 config에서 가능함</p>
<p><img loading="lazy" alt="Architecture" src="https://wandered2la.com/assets/images/docusaurus-architecture-5b7220912f5cfdff40a7728233abb902.png" width="2228" height="2007" class="img_ev3q"></p>
<p>그래서 문서를 찾아보던중 globalData를 사용할 수 있는 <code>useGlobalData</code> API가<br>
<!-- -->있긴했으나 docs의 정보만 담아줄 뿐 blog의 데이터는 담기지 않길래 Lifecycle API를 이용해<br>
<!-- -->build시 json에 블로그 정보들을 담아 사용하는 쪽으로 변경했다.<br>
<!-- -->globalData의 정보들은 <code>npm start</code>시 <code>.docusaurus/globalData.json</code>에서 확인가능</p>
<ul>
<li><a href="https://docusaurus.io/docs/docusaurus-core#useGlobalData" target="_blank" rel="noopener noreferrer">useGlobalData</a></li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="using-plugins">Using Plugins<a href="https://wandered2la.com/blog/docusaurus-plugin#using-plugins" class="hash-link" aria-label="Direct link to Using Plugins" title="Direct link to Using Plugins">​</a></h2>
<p>plugin은 명령어를 통해 설치할 수도 있지만 로컬파일을 불러와 사용가능함</p>
<div class="language-ts codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockTitle_Ktv7">docusaurus.config.js</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-ts codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">export</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">default</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token comment" style="color:rgb(98, 114, 164)">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  plugins</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token string" style="color:rgb(255, 121, 198)">'./src/plugins/docusaurus-local-plugin'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>로컬파일을 불러와 사용하는 경우 절대경로로 명시한다.</p>
<div class="language-ts codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockTitle_Ktv7">docusaurus.config.js</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-ts codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">export</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">default</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token comment" style="color:rgb(98, 114, 164)">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  plugins</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">async</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">myPlugin</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">context</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> options</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token comment" style="color:rgb(98, 114, 164)">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        name</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'my-plugin'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">async</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">loadContent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">          </span><span class="token comment" style="color:rgb(98, 114, 164)">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">async</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">contentLoaded</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> content</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> actions </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">          </span><span class="token comment" style="color:rgb(98, 114, 164)">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token comment" style="color:rgb(98, 114, 164)">/* other lifecycle API */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>직접 함수를 작성하는 방법도 가능</p>
<p>위와같이 경로를 지정했다면 Docusaurus측에서 제공하는 Lifecycle APIs를<br>
<!-- -->이용해 코드를 작성하면 된다.</p>
<ul>
<li><a href="https://docusaurus.io/docs/api/plugin-methods/lifecycle-apis" target="_blank" rel="noopener noreferrer">Lifecycle APIs</a></li>
</ul>
<p>API들중 가장 중요하다고 볼 수 있는 <code>async loadContent()</code>와<br>
<code>async contentLoaded({content, actions})</code> 두 가지가 있다 <code>loadContent</code>에서 파일시스템에<br>
<!-- -->접근하거나 다양한 동작들이 가능하고 <code>loadContent</code>에서 내가 필요한 값을 return한다면<br>
<!-- -->그 값은<code>contentLoaded</code>함수에서 <code>content</code> 파라미터로 받는다. <code>actions</code>의 경우<br>
<!-- -->기본으로 제공하는 3가지 함수들이 있고 경로를 설정하는 경우 <code>appRoute</code><br>
<!-- -->json파일을 만든다면 <code>createData</code> 나의 경우 기존 globalData.json에 데이터를
추가하려고 했기에 마지막인 <code>setGlobalData</code>를 사용했다.</p>
<ul>
<li>loadContent - 다양한 동작을 정의하는 함수 (파일시스템, API호출...)</li>
<li>contentLoaded - content,actions를 파라미터로 받는 함수<!-- -->
<ul>
<li>content: loadCotent의 리턴값</li>
<li>actions: appRoute, createData, setGlobalData로 구성</li>
</ul>
</li>
</ul>
<div class="language-ts codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockTitle_Ktv7">./src/plugins/my-plugin.js</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-ts codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">export</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">default</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  plugins</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">async</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">myPlugin</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">context</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> options</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        name</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'my-plugin'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">async</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">loadContent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">          </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token comment" style="color:rgb(98, 114, 164)">// loadContent의 return값 content에 전달</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">async</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">contentLoaded</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> content</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> actions </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">          </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> setGlobalData </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> actions</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">          </span><span class="token function" style="color:rgb(80, 250, 123)">setGlobalData</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> myBlogData</span><span class="token operator">:</span><span class="token plain"> content </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>위처럼 코드를 작성하면 <code>npm start</code>시 globalData에 데이터가 저장되고<br>
<!-- -->내가 원하는 부분에서 사용하려면 <code>useGlobalData</code> 및 <code>usePluginData</code>를 사용해<br>
<!-- -->데이터를 가져와 사용하면 끝</p>
<div class="language-tsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockTitle_Ktv7">./src/pages/index.tsx</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-tsx codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token imports"> usePluginData </span><span class="token imports punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'@docusaurus/useGlobalData'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">export</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">default</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">Home</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> myBlogData </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">usePluginData</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">'my-plugin'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag" style="color:rgb(255, 121, 198)">ul</span><span class="token tag" style="color:rgb(255, 121, 198)"> </span><span class="token tag attr-name" style="color:rgb(241, 250, 140)">className</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(248, 248, 242)">=</span><span class="token tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token tag attr-value" style="color:rgb(255, 121, 198)">post-list-container</span><span class="token tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain-text">      </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain">myBlogData</span><span class="token operator">?.</span><span class="token method function property-access" style="color:rgb(80, 250, 123)">map</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">post</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token arrow operator">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag" style="color:rgb(255, 121, 198)">li</span><span class="token tag" style="color:rgb(255, 121, 198)"> </span><span class="token tag attr-name" style="color:rgb(241, 250, 140)">key</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(248, 248, 242)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token tag script language-javascript" style="color:rgb(255, 121, 198)">post</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token tag script language-javascript property-access" style="color:rgb(255, 121, 198)">slug</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain-text">          </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag class-name" style="color:rgb(255, 121, 198)">Link</span><span class="token tag" style="color:rgb(255, 121, 198)"> </span><span class="token tag attr-name" style="color:rgb(241, 250, 140)">to</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(248, 248, 242)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token tag script language-javascript template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><span class="token tag script language-javascript template-string string" style="color:rgb(255, 121, 198)">/blog/</span><span class="token tag script language-javascript template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">${</span><span class="token tag script language-javascript template-string interpolation" style="color:rgb(255, 121, 198)">post</span><span class="token tag script language-javascript template-string interpolation punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token tag script language-javascript template-string interpolation" style="color:rgb(255, 121, 198)">slug</span><span class="token tag script language-javascript template-string interpolation interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token tag script language-javascript template-string template-punctuation string" style="color:rgb(255, 121, 198)">`</span><span class="token tag script language-javascript punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain">post</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">title</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;/</span><span class="token tag class-name" style="color:rgb(255, 121, 198)">Link</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain-text">          </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain">post</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token property-access">date</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain-text">        </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;/</span><span class="token tag" style="color:rgb(255, 121, 198)">li</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain-text">    </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;/</span><span class="token tag" style="color:rgb(255, 121, 198)">ul</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content:encoded>
            <category>docusaurus</category>
            <category>plugin</category>
            <category>custom</category>
        </item>
        <item>
            <title><![CDATA[안전한 프론트엔드 서비스란?]]></title>
            <link>https://wandered2la.com/blog/frontend-observability</link>
            <guid>https://wandered2la.com/blog/frontend-observability</guid>
            <pubDate>Sat, 22 Jun 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[SSR(Server-Side Rendering) 도입의 변화]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="ssrserver-side-rendering-도입의-변화">SSR(Server-Side Rendering) 도입의 변화<a href="https://wandered2la.com/blog/frontend-observability#ssrserver-side-rendering-%EB%8F%84%EC%9E%85%EC%9D%98-%EB%B3%80%ED%99%94" class="hash-link" aria-label="Direct link to SSR(Server-Side Rendering) 도입의 변화" title="Direct link to SSR(Server-Side Rendering) 도입의 변화">​</a></h2>
<p>여러기업들에서 사용자에게 더 나은 사용성을 제공하기 위해 노력하고 있다.<br>
<!-- -->Frontend 측면에서 어떤 노력들을 하고있을까 찾아보았는데<br>
<!-- -->첫번째는 Node.js 의 발전으로 server와 client가 같은 언어를 사용하게 되면서<br>
<!-- -->렌더링의 책임을 Server로 이전하려는 움직임이 나타났고<br>
<!-- -->클라이언트 측에서 렌더링을 담당하던 React와 같은 환경에서<br>
<!-- -->사용자들이 페이지에 처음으로 진입하는 시간<code>(LCP/FCP)</code>을 줄여 더 나은 사용성을 제공한 것이다.</p>
<p>이런 대표적인 프레임워크로 Next.js가 있고 단점은<br>
<!-- -->Server측에서 렌더링 한다는 것은 결국 관리해야하는 서버가 있다는 것이고 곧<br>
<!-- -->모니터링 하는데 비용이 들고 트래픽이 몰릴 경우를 대비해야한다.<br>
<!-- -->또한 Build 및 배포시간이 오래걸린다는 단점도 존재.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="observability">Observability?<a href="https://wandered2la.com/blog/frontend-observability#observability" class="hash-link" aria-label="Direct link to Observability?" title="Direct link to Observability?">​</a></h2>
<p>컨퍼런스나 자료들을 찾다보면 <code>Observability</code>라는 단어를 심심치 않게 볼 수 있다.<br>
<!-- -->도대체 무슨 뜻일까 보다보니 나에게는 이상적으로 다가왔는데<br>
<!-- -->이 단어를 만든 사람 <code>Rudolf E Kalman</code>은 "시스템의 출력으로부터 시스템의 상태를 이해할 수 있는 능력"
이라고 한다 결국 이 말이 로깅이나 모니터링 지표를 통해 우리의 App의 상태를 측정하고<br>
<!-- -->발 빠른 대응이 가능한 능력이라고 생각한다.</p>
<p>특히나 규모가 큰 기업들은 MSA같은 아키텍처를 사용하고 요청이 분산처리되어<br>
<!-- -->제대로 로그를 확인하거나 모니터링이 힘들 수 있다.<br>
<!-- -->이상적으로는 에러가 아예없는 환경을 꿈꾸긴 하겠지만 에러는 있을 수 밖에 없고<br>
<!-- -->그렇기에 발빠른 대응을 위해 최대한 <code>Observability</code>를 향상시키기 위해 힘쓰는것 같다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="web-vitals">Web Vitals<a href="https://wandered2la.com/blog/frontend-observability#web-vitals" class="hash-link" aria-label="Direct link to Web Vitals" title="Direct link to Web Vitals">​</a></h2>
<p>대표적으로 프론트엔드의 성능을 측정할 때 신경 쓰는 4가지는</p>
<ul>
<li>TTFB: 브라우저가 서버로부터 첫번째 바이트를 수신하는 속도(&gt;500ms)</li>
<li>LCP: 가장 큰 콘텐츠가 브라우저에 그려지기까지의 속도(&gt;2.5s)</li>
<li>FCP: 사용자에게 볼 수 있는 콘텐츠가 최초로 그려지기까지의 속도(&gt;1.8s)</li>
<li>TTI: 페이지 로딩이 완료되고 사용자 입력에 응답하기까지의 속도(&gt;100ms)</li>
</ul>
<p>이 외에도 레이아웃 시프트(CLS)나 TTI와 유사한 FID등이 있다.</p>
<p>이런 지표들의 자세한 설명이아닌 이유에 대해 생각해보려 하는데<br>
<!-- -->위와같은 지표들을 통해 성능을 측정/최적화 하는 것은 사용자 경험 개선으로 이어지고<br>
<!-- -->꾸준한 모니터링을 통해 성능의 저하를 막는다고 생각한다 혹은 테스트코드 작성을 통해 막거나?</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="정리">정리<a href="https://wandered2la.com/blog/frontend-observability#%EC%A0%95%EB%A6%AC" class="hash-link" aria-label="Direct link to 정리" title="Direct link to 정리">​</a></h2>
<p>누군가 나에게 안전한 프론트엔드 서비스란 뭐에요? 라고 묻는다면<br>
<!-- -->Frontend의 Observability를 가능한 최대로 끌어올리는 것과 Metric같은 보조지표를 활용하여<br>
<!-- -->App의 성능을 측정하고 최적화,정확성을 테스트하여 웹사이트의 다양한 측면들을 원활하게<br>
<!-- -->만들어 사용자 경험을 개선하고 에러를 감지하여 신속하게 처리할 수 있는 모니터링 환경을 구성하는 것
이상적으로는 에러가 아예없는 환경이 안전한 프론트엔드 서비스에 근접하지 않을까 라고 대답할것같다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="참고">참고<a href="https://wandered2la.com/blog/frontend-observability#%EC%B0%B8%EA%B3%A0" class="hash-link" aria-label="Direct link to 참고" title="Direct link to 참고">​</a></h3>
<ul>
<li><a href="https://www.youtube.com/watch?v=hPyyFu3lrEg&amp;list=PLpkj8RKr48waFtrqvJjbNrpGCvdxyX8Nx&amp;index=30" target="_blank" rel="noopener noreferrer">SSR의 기쁨과 슬픔: 렌더링의 변화의 흐름을 통해 알아보는 SSR과 Streaming SSR | 인프콘2023</a></li>
<li><a href="https://www.youtube.com/watch?v=9xl9X2pfHeI&amp;t=1934s" target="_blank" rel="noopener noreferrer">[Dev Dive_ Frontend Day] 스트리밍 SSR 딥 다이브</a></li>
<li><a href="https://www.youtube.com/watch?v=Ifz0LsfAG94&amp;list=PL1DJtS1Hv1PiGXmgruP1_gM2TSvQiOsFL&amp;index=23" target="_blank" rel="noopener noreferrer">토스ㅣSLASH 23 - 분산 추적 체계 &amp; 로그 중심으로 Observability 확보하기</a></li>
<li><a href="https://www.youtube.com/watch?v=2IE68SDTYvI" target="_blank" rel="noopener noreferrer">토스ㅣSLASH 22 - 잃어버린 개발자의 시간을 찾아서: 매일 하루를 아끼는 DevOps 이야기</a></li>
</ul>]]></content:encoded>
            <category>Observability</category>
            <category>Frontend</category>
        </item>
    </channel>
</rss>